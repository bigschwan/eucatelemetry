#!/usr/bin/python
import driver

from time import sleep
from eucaops import Eucaops
import argparse

from stevedore.extension import ExtensionManager


if __name__ == '__main__':
    results = []
    driver.start_threads()
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'plugin',
        help='maximum output width for text',
    )
    parser.add_argument(
        '--credpath',
        help='maximum output width for text',
    )
    parser.add_argument(
        '--config',
        help='maximum output width for text',
    )
    parser.add_argument(
        '--password',
        default='a1pine',
        help='maximum output width for text',
    )
    parser.add_argument(
        '--collectd-host',
        default='127.0.0.1',
        help='Host to send data to',
    )
    parser.add_argument(
        '--collectd-port',
        default=8096,
        type=int,
        help='Port to send data to',
    )
    parser.add_argument(
        '--poll-interval',
        default=5,
        type=int,
        help='Port to send data to',
    )
    args = parser.parse_args()
    tester = Eucaops(credpath=args.credpath, config_file=args.config,
                     password=args.password)
    conn = driver.Connection(collectd_host=args.collectd_host,
                               collectd_port=args.collectd_port,
                               plugin_name='eucalyptus')
    eutester_plugins = ExtensionManager(
        namespace='eucatelemetry.eutester',
        invoke_on_load=True,
        invoke_args=(tester,)
    )
    def send_data(ext):
        data_path = getattr(conn, ext.name)
        data = ext.obj.gather()
        print ext.name + ":" + str(data)
        data_path.set_exact(**data)
        return (ext.name, data)
    eutester_plugins.propagate_map_exceptions = True
    while True:
        try:
            sleep(args.poll_interval)
            results = eutester_plugins.map(send_data)
        except KeyboardInterrupt:
            exit(0)
        except Exception, e:
            print 'Caught Exception: ' + str(e)
